// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int       @id @default(autoincrement())
  name              String    @db.VarChar(255)
  email             String    @unique @db.VarChar(255)
  email_verified_at DateTime?
  password          String    @db.VarChar(255)
  remember_token    String?   @db.VarChar(100)
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  @@map("users")
}

model Staff {
  id          Int      @id @default(autoincrement())
  full_name   String   @db.VarChar(255)
  phone       String?  @db.VarChar(20)
  role        String   @db.VarChar(50)
  department  String?  @db.VarChar(255)
  img         String?  @db.VarChar(500)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("staff")
}

model PerfResultsType {
  id         Int      @id @default(autoincrement())
  type_name  String   @db.VarChar(255)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  sections PerfResultsSection[]

  @@map("perf_results_types")
}

model PerfResultsSection {
  id           Int       @id @default(autoincrement())
  type_id      Int
  section_name String    @db.VarChar(255)
  date         DateTime?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  // Relations
  type      PerfResultsType     @relation(fields: [type_id], references: [id], onDelete: Cascade)
  subTopics PerfResultsSubTopic[]

  @@map("perf_results_sections")
}

model PerfResultsSubTopic {
  id         Int       @id @default(autoincrement())
  section_id Int
  topic_name String    @db.VarChar(255)
  date       DateTime?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  // Relations
  section PerfResultsSection @relation(fields: [section_id], references: [id], onDelete: Cascade)
  files   PerfResultsFile[]

  @@map("perf_results_sub_topics")
}

model PerfResultsFile {
  id           Int      @id @default(autoincrement())
  sub_topic_id Int
  files_path   String   @db.VarChar(500)
  files_type   String   @db.VarChar(100)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  // Relations
  subTopic PerfResultsSubTopic @relation(fields: [sub_topic_id], references: [id], onDelete: Cascade)

  @@map("perf_results_files")
}
