generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name              String    @db.VarChar(255)
  email             String    @unique(map: "users_email_unique") @db.VarChar(255)
  email_verified_at DateTime? @db.Timestamp(0)
  password          String    @db.VarChar(255)
  level             String    @db.VarChar(255)
  remember_token    String?   @db.VarChar(100)
  created_at        DateTime? @db.Timestamp(0)
  updated_at        DateTime? @updatedAt @db.Timestamp(0)

  @@map("users")
}

model Staff {
  id         BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  full_name  String     @db.VarChar(255)
  phone      String     @db.VarChar(50)
  role       staff_role
  department String?    @db.VarChar(255)
  img        String?    @db.VarChar(255)
  created_at DateTime?  @default(now()) @db.Timestamp(0)
  updated_at DateTime?  @default(now()) @updatedAt @db.Timestamp(0)

  @@map("staff")
}

model PerfResultsType {
  id         BigInt               @id @default(autoincrement()) @db.UnsignedBigInt
  type_name  String               @db.Text
  created_at DateTime?            @db.Timestamp(0)
  updated_at DateTime?            @updatedAt @db.Timestamp(0)
  sections   PerfResultsSection[]

  @@map("perf_results_types")
}

model PerfResultsSection {
  id           BigInt                @id @default(autoincrement()) @db.UnsignedBigInt
  type_id      BigInt?               @db.UnsignedBigInt
  section_name String                @db.Text
  date         DateTime?             @db.Date
  created_at   DateTime?             @db.Timestamp(0)
  updated_at   DateTime?             @updatedAt @db.Timestamp(0)
  type         PerfResultsType?      @relation(fields: [type_id], references: [id], onUpdate: Restrict, map: "perf_results_sections_type_id_foreign")
  subTopics    PerfResultsSubTopic[]

  @@index([type_id], map: "perf_results_sections_type_id_foreign")
  @@map("perf_results_sections")
}

model PerfResultsSubTopic {
  id         BigInt              @id @default(autoincrement()) @db.UnsignedBigInt
  section_id BigInt?             @db.UnsignedBigInt
  topic_name String              @db.Text
  date       DateTime?           @db.Date
  created_at DateTime?           @db.Timestamp(0)
  updated_at DateTime?           @updatedAt @db.Timestamp(0)
  files      PerfResultsFile[]
  section    PerfResultsSection? @relation(fields: [section_id], references: [id], onUpdate: Restrict, map: "perf_results_sub_topics_section_id_foreign")

  @@index([section_id], map: "perf_results_sub_topics_section_id_foreign")
  @@map("perf_results_sub_topics")
}

model Complaints {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  senderName String   @db.VarChar(255)
  senderEmail String  @db.VarChar(255)
  phone      String?  @db.VarChar(50)
  subject    String?  @db.VarChar(255)
  message    String   @db.Text
  captcha    String?  @db.VarChar(50)
  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @updatedAt @db.Timestamp(0)

  @@map("complaints")
}

model PerfResultsFile {
  id           BigInt               @id @default(autoincrement()) @db.UnsignedBigInt
  sub_topic_id BigInt?              @db.UnsignedBigInt
  files_path   String               @db.VarChar(255)
  files_type   String               @db.VarChar(255)
  created_at   DateTime?            @db.Timestamp(0)
  updated_at   DateTime?            @updatedAt @db.Timestamp(0)
  subTopic     PerfResultsSubTopic? @relation(fields: [sub_topic_id], references: [id], onUpdate: Restrict, map: "perf_results_files_sub_topic_id_foreign")

  @@index([sub_topic_id], map: "perf_results_files_sub_topic_id_foreign")
  @@map("perf_results_files")
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  uuid       String   @unique(map: "failed_jobs_uuid_unique") @db.VarChar(255)
  connection String   @db.Text
  queue      String   @db.Text
  payload    String   @db.LongText
  exception  String   @db.LongText
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model ita_contents {
  id            BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  url           String    @db.VarChar(500)
  description   String?   @db.Text
  evaluation_id BigInt    @db.UnsignedBigInt
  created_at    DateTime? @db.Timestamp(0)
  updated_at    DateTime? @db.Timestamp(0)
  deleted_at    DateTime? @db.Timestamp(0)
}

model ita_evaluations {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name        String    @db.VarChar(255)
  description String?   @db.Text
  ita_date    DateTime? @db.Date
  deleted_at  DateTime? @db.Timestamp(0)
  created_at  DateTime? @default(now()) @db.Timestamp(0)
  updated_at  DateTime? @default(now()) @db.Timestamp(0)
}

model laws_regs_files {
  id                 BigInt              @id @default(autoincrement()) @db.UnsignedBigInt
  section_id         BigInt?             @db.UnsignedBigInt
  files_path         String              @db.VarChar(255)
  files_type         String              @db.VarChar(255)
  created_at         DateTime?           @db.Timestamp(0)
  updated_at         DateTime?           @db.Timestamp(0)
  laws_regs_sections laws_regs_sections? @relation(fields: [section_id], references: [id], onUpdate: Restrict, map: "laws_regs_files_section_id_foreign")

  @@index([section_id], map: "laws_regs_files_section_id_foreign")
}

model laws_regs_sections {
  id              BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  type_id         BigInt?           @db.UnsignedBigInt
  section_name    String            @db.Text
  created_at      DateTime?         @db.Timestamp(0)
  updated_at      DateTime?         @db.Timestamp(0)
  laws_regs_files laws_regs_files[]
  laws_regs_types laws_regs_types?  @relation(fields: [type_id], references: [id], onUpdate: Restrict, map: "laws_regs_sections_type_id_foreign")

  @@index([type_id], map: "laws_regs_sections_type_id_foreign")
}

model laws_regs_types {
  id                 BigInt               @id @default(autoincrement()) @db.UnsignedBigInt
  type_name          String               @db.Text
  created_at         DateTime?            @db.Timestamp(0)
  updated_at         DateTime?            @db.Timestamp(0)
  laws_regs_sections laws_regs_sections[]
}

model local_dev_plan_files {
  id                   BigInt               @id @default(autoincrement()) @db.UnsignedBigInt
  type_id              BigInt               @db.UnsignedBigInt
  files_path           String               @db.VarChar(255)
  files_type           String               @db.VarChar(255)
  created_at           DateTime?            @db.Timestamp(0)
  updated_at           DateTime?            @db.Timestamp(0)
  local_dev_plan_types local_dev_plan_types @relation(fields: [type_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "local_dev_plan_files_type_id_foreign")

  @@index([type_id], map: "local_dev_plan_files_type_id_foreign")
}

model local_dev_plan_types {
  id                   BigInt                 @id @default(autoincrement()) @db.UnsignedBigInt
  type_name            String                 @db.VarChar(255)
  created_at           DateTime?              @db.Timestamp(0)
  updated_at           DateTime?              @db.Timestamp(0)
  local_dev_plan_files local_dev_plan_files[]
}

model menu_attachments {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  menu_id    BigInt    @db.UnsignedBigInt
  title      String?   @db.VarChar(255)
  word_file  String?   @db.VarChar(255)
  excel_file String?   @db.VarChar(255)
  pdf_file   String?   @db.VarChar(255)
  image_file String?   @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  menus      menus     @relation(fields: [menu_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "menu_attachments_menu_id_foreign")

  @@index([menu_id], map: "menu_attachments_menu_id_foreign")
}

model menus {
  id               BigInt             @id @default(autoincrement()) @db.UnsignedBigInt
  name             String             @db.VarChar(255)
  link             String?            @db.VarChar(255)
  parent_id        BigInt?            @db.UnsignedBigInt
  level            menus_level        @default(main)
  order_no         Int                @default(0)
  created_at       DateTime?          @db.Timestamp(0)
  updated_at       DateTime?          @db.Timestamp(0)
  menu_attachments menu_attachments[]
  menus            menus?             @relation("menusTomenus", fields: [parent_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "menus_parent_id_foreign")
  other_menus      menus[]            @relation("menusTomenus")

  @@index([parent_id], map: "menus_parent_id_foreign")
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String @db.VarChar(255)
  batch     Int
}

model password_reset_tokens {
  email      String    @id @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
}

model personal_access_tokens {
  id             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  tokenable_type String    @db.VarChar(255)
  tokenable_id   BigInt    @db.UnsignedBigInt
  name           String    @db.VarChar(255)
  token          String    @unique(map: "personal_access_tokens_token_unique") @db.VarChar(64)
  abilities      String?   @db.Text
  last_used_at   DateTime? @db.Timestamp(0)
  expires_at     DateTime? @db.Timestamp(0)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)

  @@index([tokenable_type, tokenable_id], map: "personal_access_tokens_tokenable_type_tokenable_id_index")
}

model post_details {
  id           BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  post_type_id BigInt?       @db.UnsignedBigInt
  date         DateTime?     @db.Date
  title_name   String?       @db.Text
  topic_name   String?       @db.Text
  details      String?       @db.MediumText
  created_at   DateTime?     @db.Timestamp(0)
  updated_at   DateTime?     @db.Timestamp(0)
  post_types   post_types?   @relation(fields: [post_type_id], references: [id], onUpdate: Restrict, map: "post_details_post_type_id_foreign")
  post_pdfs    post_pdfs[]
  post_photos  post_photos[]
  post_videos  post_videos[]

  @@index([post_type_id], map: "post_details_post_type_id_foreign")
}

model post_pdfs {
  id             BigInt       @id @default(autoincrement()) @db.UnsignedBigInt
  post_detail_id BigInt       @db.UnsignedBigInt
  post_pdf_file  String       @db.VarChar(255)
  created_at     DateTime?    @db.Timestamp(0)
  updated_at     DateTime?    @db.Timestamp(0)
  post_details   post_details @relation(fields: [post_detail_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "post_pdfs_post_detail_id_foreign")

  @@index([post_detail_id], map: "post_pdfs_post_detail_id_foreign")
}

model post_photos {
  id                BigInt       @id @default(autoincrement()) @db.UnsignedBigInt
  post_detail_id    BigInt       @db.UnsignedBigInt
  post_photo_file   String       @db.VarChar(255)
  post_photo_status String       @db.VarChar(255)
  created_at        DateTime?    @db.Timestamp(0)
  updated_at        DateTime?    @db.Timestamp(0)
  post_details      post_details @relation(fields: [post_detail_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "post_photos_post_detail_id_foreign")

  @@index([post_detail_id], map: "post_photos_post_detail_id_foreign")
}

model post_types {
  id           BigInt         @id @default(autoincrement()) @db.UnsignedBigInt
  type_name    String         @db.VarChar(255)
  created_at   DateTime?      @db.Timestamp(0)
  updated_at   DateTime?      @db.Timestamp(0)
  post_details post_details[]
}

model post_videos {
  id              BigInt       @id @default(autoincrement()) @db.UnsignedBigInt
  post_detail_id  BigInt       @db.UnsignedBigInt
  post_video_file String       @db.VarChar(255)
  created_at      DateTime?    @db.Timestamp(0)
  updated_at      DateTime?    @db.Timestamp(0)
  post_details    post_details @relation(fields: [post_detail_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "post_videos_post_detail_id_foreign")

  @@index([post_detail_id], map: "post_videos_post_detail_id_foreign")
}

model procurement_plan_files {
  id                     BigInt                 @id @default(autoincrement()) @db.UnsignedBigInt
  type_id                BigInt                 @db.UnsignedBigInt
  files_path             String                 @db.VarChar(255)
  files_type             String                 @db.VarChar(255)
  created_at             DateTime?              @db.Timestamp(0)
  updated_at             DateTime?              @db.Timestamp(0)
  procurement_plan_types procurement_plan_types @relation(fields: [type_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "procurement_plan_files_type_id_foreign")

  @@index([type_id], map: "procurement_plan_files_type_id_foreign")
}

model procurement_plan_types {
  id                     BigInt                   @id @default(autoincrement()) @db.UnsignedBigInt
  type_name              String                   @db.VarChar(255)
  created_at             DateTime?                @db.Timestamp(0)
  updated_at             DateTime?                @db.Timestamp(0)
  procurement_plan_files procurement_plan_files[]
}

enum staff_role {
  leader
  coleader
  employee
}

model CorruptionComplaint {
  id                   BigInt                      @id @default(autoincrement()) @db.UnsignedBigInt
  complaint_date       DateTime                    @db.Date
  
  // ข้อมูลผู้ร้องเรียน (Complainant Information)
  complainant_name     String                      @db.VarChar(255)
  complainant_id_card  String                      @db.VarChar(13)
  complainant_address  String                      @db.Text
  complainant_age      Int
  complainant_phone    String                      @db.VarChar(20)
  
  // ข้อมูลผู้ถูกร้องเรียน (Accused Information)
  accused_name         String                      @db.VarChar(255)
  accused_position     String                      @db.VarChar(255)
  accused_agency       String                      @db.VarChar(255)
  accused_province     String                      @db.VarChar(100)
  
  // รายละเอียดการร้องเรียน (Complaint Details)
  complaint_details    String                      @db.Text
  attachments          String?                     @db.Text // JSON string of file attachments
  
  // สถานะการดำเนินการ (Status Management)
  status               CorruptionComplaintStatus   @default(pending)
  status_note          String?                     @db.Text
  
  // ข้อมูลการติดตาม (Tracking Information)
  assigned_to          String?                     @db.VarChar(255)
  investigation_result String?                     @db.Text
  action_taken         String?                     @db.Text
  
  // ข้อมูลระบบ (System Information)
  ip_address           String?                     @db.VarChar(45)
  user_agent           String?                     @db.Text
  created_at           DateTime?                   @default(now()) @db.Timestamp(0)
  updated_at           DateTime?                   @default(now()) @updatedAt @db.Timestamp(0)

  @@index([complaint_date], map: "idx_complaint_date")
  @@index([complainant_name], map: "idx_complainant_name")
  @@index([accused_name], map: "idx_accused_name")
  @@index([status], map: "idx_status")
  @@index([created_at], map: "idx_created_at")
  @@map("corruption_complaints")
}

enum CorruptionComplaintStatus {
  pending
  investigating
  completed
  rejected
}

enum menus_level {
  main
  sub
  small_sub
}

model WaterSupportRequest {
  id                    BigInt                     @id @default(autoincrement()) @db.UnsignedBigInt
  request_date          DateTime                   @db.Date
  
  // ข้อมูลผู้ยื่นคำร้อง (Requester Information)
  requester_title       String                     @db.VarChar(20) // นาย, นาง, นางสาว
  requester_name        String                     @db.VarChar(255)
  requester_age         Int?
  requester_house_number String                    @db.VarChar(50)
  requester_village     String                     @db.VarChar(100)
  requester_subdistrict String                     @default("ตำบลบ้านโพธิ์") @db.VarChar(100)
  requester_district    String                     @default("อำเภอบ้านโพธิ์") @db.VarChar(100)
  requester_province    String                     @default("จังหวัดฉะเชิงเทรา") @db.VarChar(100)
  requester_phone       String?                    @db.VarChar(20)
  family_members        Int?
  
  // รายละเอียดคำร้อง (Request Details)
  water_needs           String                     @db.Text // ความต้องการใช้น้ำ
  symptoms_description  String                     @db.Text // อาการและประเภท
  
  // สถานะการดำเนินการ (Status Management)
  status                WaterSupportRequestStatus  @default(pending)
  status_note           String?                    @db.Text
  
  // ข้อมูลระบบ (System Information)
  captcha_answer        String?                    @db.VarChar(10)
  ip_address            String?                    @db.VarChar(45)
  user_agent            String?                    @db.Text
  created_at            DateTime?                  @default(now()) @db.Timestamp(0)
  updated_at            DateTime?                  @default(now()) @updatedAt @db.Timestamp(0)

  @@index([request_date], map: "idx_water_request_date")
  @@index([requester_name], map: "idx_water_requester_name")
  @@index([status], map: "idx_water_status")
  @@index([created_at], map: "idx_water_created_at")
  @@map("water_support_requests")
}

enum WaterSupportRequestStatus {
  pending
  processing
  completed
  rejected
}

model WastebinRequest {
  id                      BigInt                @id @default(autoincrement()) @db.UnsignedBigInt
  request_date            DateTime              @db.Date
  
  // ข้อมูลผู้ยื่นคำร้อง (Requester Information)
  requester_title         String                @db.VarChar(20) // นาย, นาง, นางสาว, หน่วยงาน
  requester_name          String                @db.VarChar(255)
  requester_age           Int
  requester_house_number  String                @db.VarChar(50)
  requester_street        String?               @db.VarChar(100)
  requester_village       String                @db.VarChar(100)
  requester_subdistrict   String                @default("ตำบลบ้านโพธิ์") @db.VarChar(100)
  requester_district      String                @default("อำเภอบ้านโพธิ์") @db.VarChar(100)
  requester_province      String                @default("จังหวัดฉะเชิงเทรา") @db.VarChar(100)
  
  // รายละเอียดคำร้อง (Request Details)
  bin_quantity            Int                   // จำนวนถังขยะที่ต้องการ
  delivery_house_number   String                @db.VarChar(50)
  delivery_village        String                @db.VarChar(100)
  
  // เอกสารประกอบ (Documents)
  house_registration_doc  String?               @db.VarChar(255) // สำเนาทะเบียนบ้าน
  id_card_doc            String?               @db.VarChar(255) // สำเนาบัตรประชาชน
  document_1             String?               @db.VarChar(255)
  document_2             String?               @db.VarChar(255)
  document_3             String?               @db.VarChar(255)
  
  // สถานะการดำเนินการ (Status Management)
  status                 WastebinRequestStatus @default(pending)
  status_note            String?               @db.Text
  
  // ข้อมูลระบบ (System Information)
  captcha_answer         String?               @db.VarChar(10)
  ip_address             String?               @db.VarChar(45)
  user_agent             String?               @db.Text
  created_at             DateTime?             @default(now()) @db.Timestamp(0)
  updated_at             DateTime?             @default(now()) @updatedAt @db.Timestamp(0)

  @@index([request_date], map: "idx_wastebin_request_date")
  @@index([requester_name], map: "idx_wastebin_requester_name")
  @@index([status], map: "idx_wastebin_status")
  @@index([created_at], map: "idx_wastebin_created_at")
  @@map("wastebin_requests")
}

enum WastebinRequestStatus {
  pending
  processing
  completed
  rejected
}

model WasteCollectionRequest {
  id                      BigInt                      @id @default(autoincrement()) @db.UnsignedBigInt
  request_date            DateTime                    @db.Date
  
  // ข้อมูลผู้ยื่นคำร้อง (Requester Information)
  requester_title         String                      @db.VarChar(20) // นาย, นาง, นางสาว, หน่วยงาน
  requester_name          String                      @db.VarChar(255)
  requester_age           Int
  requester_house_number  String                      @db.VarChar(50)
  requester_village       String                      @db.VarChar(100)
  requester_subdistrict   String                      @default("ตำบลบ้านโพธิ์") @db.VarChar(100)
  requester_district      String                      @default("อำเภอบ้านโพธิ์") @db.VarChar(100)
  requester_province      String                      @default("จังหวัดฉะเชิงเทรา") @db.VarChar(100)
  requester_phone         String?                     @db.VarChar(20)
  
  // ประเภทขยะ (Waste Types)
  waste_type_household    Boolean                     @default(false) // บ้านที่อยู่อาศัย
  waste_type_rental       Boolean                     @default(false) // บ้านเจ้า/อาคารให้เช่า
  waste_type_shop         Boolean                     @default(false) // ร้านค้า
  waste_type_factory      Boolean                     @default(false) // โรงงาน/ประกอบธุรกิจ
  other_waste_type        String?                     @db.Text // อื่นๆ
  
  // รายละเอียดคำร้อง (Request Details)
  collection_details      String                      @db.Text // รายละเอียดการจัดเก็บ
  reason_for_request      String                      @db.Text // เหตุผลความจำเป็น
  
  // สถานะการดำเนินการ (Status Management)
  status                  WasteCollectionRequestStatus @default(pending)
  status_note             String?                     @db.Text
  
  // ข้อมูลระบบ (System Information)
  captcha_answer          String?                     @db.VarChar(10)
  ip_address              String?                     @db.VarChar(45)
  user_agent              String?                     @db.Text
  created_at              DateTime?                   @default(now()) @db.Timestamp(0)
  updated_at              DateTime?                   @default(now()) @updatedAt @db.Timestamp(0)

  @@index([request_date], map: "idx_waste_collection_request_date")
  @@index([requester_name], map: "idx_waste_collection_requester_name")
  @@index([status], map: "idx_waste_collection_status")
  @@index([created_at], map: "idx_waste_collection_created_at")
  @@map("waste_collection_requests")
}

enum WasteCollectionRequestStatus {
  pending
  processing
  completed
  rejected
}
