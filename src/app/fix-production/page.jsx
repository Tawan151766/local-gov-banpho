"use client";
import { useState } from 'react';

export default function FixProductionPage() {
  const [results, setResults] = useState({});
  const [loading, setLoading] = useState({});

  const runAction = async (action, label) => {
    setLoading(prev => ({ ...prev, [label]: true }));
    try {
      const response = await fetch(action.endpoint, {
        method: action.method || 'GET',
        headers: action.headers || {}
      });
      const data = await response.json();
      setResults(prev => ({ 
        ...prev, 
        [label]: { 
          status: response.status, 
          success: response.ok,
          data: data,
          timestamp: new Date().toISOString()
        } 
      }));
    } catch (error) {
      setResults(prev => ({ 
        ...prev, 
        [label]: { 
          status: 'ERROR', 
          success: false,
          error: error.message,
          timestamp: new Date().toISOString()
        } 
      }));
    } finally {
      setLoading(prev => ({ ...prev, [label]: false }));
    }
  };

  const actions = [
    {
      label: '1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Database Connection',
      description: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà',
      endpoint: '/api/test-db',
      method: 'GET',
      color: 'bg-blue-600 hover:bg-blue-700'
    },
    {
      label: '2. ‡∏™‡∏£‡πâ‡∏≤‡∏á Sample Data',
      description: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö (‡∏Ç‡πà‡∏≤‡∏ß, ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°, ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®)',
      endpoint: '/api/seed-posts',
      method: 'POST',
      color: 'bg-green-600 hover:bg-green-700'
    },
    {
      label: '3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö News API',
      description: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå (postTypeId=1)',
      endpoint: '/api/post-details?page=1&limit=4&postTypeId=1&withMedia=true',
      method: 'GET',
      color: 'bg-purple-600 hover:bg-purple-700'
    },
    {
      label: '4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Activities API',
      description: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° (postTypeId=2)',
      endpoint: '/api/post-details?page=1&limit=4&postTypeId=2&withMedia=true',
      method: 'GET',
      color: 'bg-orange-600 hover:bg-orange-700'
    },
    {
      label: '5. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Finance API',
      description: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏à‡∏±‡∏î‡∏ã‡∏∑‡πâ‡∏≠‡∏à‡∏±‡∏î‡∏à‡πâ‡∏≤‡∏á (postTypeId=3)',
      endpoint: '/api/post-details?page=1&limit=4&postTypeId=3&withMedia=true',
      method: 'GET',
      color: 'bg-indigo-600 hover:bg-indigo-700'
    },
    {
      label: '6. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Post Types',
      description: '‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö',
      endpoint: '/api/post-types',
      method: 'GET',
      color: 'bg-gray-600 hover:bg-gray-700'
    }
  ];

  const runAllTests = () => {
    actions.forEach((action, index) => {
      setTimeout(() => {
        runAction(action, action.label);
      }, index * 1000); // ‡πÄ‡∏ß‡πâ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞ 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    });
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-4">
      <div className="max-w-7xl mx-auto">
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-gray-800 mb-4">
            üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Production
          </h1>
          <p className="text-lg text-gray-600 mb-6">
            ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πà‡∏≤‡∏ß‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡πÅ‡∏•‡∏∞‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏ô Production
          </p>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6 max-w-4xl mx-auto">
            <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4 text-left">
              <h3 className="font-semibold text-yellow-800 mb-2">üö® ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö:</h3>
              <ul className="text-yellow-700 space-y-1 text-sm">
                <li>‚Ä¢ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πà‡∏≤‡∏ß‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå</li>
                <li>‚Ä¢ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°</li>
                <li>‚Ä¢ API endpoints ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î</li>
              </ul>
            </div>
            
            <div className="bg-green-50 border border-green-200 rounded-lg p-4 text-left">
              <h3 className="font-semibold text-green-800 mb-2">‚ö° ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏î‡πà‡∏ß‡∏ô:</h3>
              <ul className="text-green-700 space-y-1 text-sm">
                <li>‚Ä¢ ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏î‡πà‡∏ß‡∏ô" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á</li>
                <li>‚Ä¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á post_types ‡πÅ‡∏•‡∏∞ sample data</li>
                <li>‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ</li>
              </ul>
            </div>
          </div>

          <div className="flex flex-wrap gap-4 justify-center mb-8">
            <button
              onClick={runAllTests}
              className="bg-red-600 text-white px-8 py-3 rounded-lg hover:bg-red-700 transition-colors font-semibold text-lg"
            >
              üöÄ ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            </button>
            
            <button
              onClick={() => runAction({ endpoint: '/api/fix-production', method: 'POST' }, '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏î‡πà‡∏ß‡∏ô')}
              disabled={loading['‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏î‡πà‡∏ß‡∏ô']}
              className="bg-green-600 text-white px-8 py-3 rounded-lg hover:bg-green-700 transition-colors font-semibold text-lg disabled:bg-gray-400"
            >
              {loading['‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏î‡πà‡∏ß‡∏ô'] ? '‚ö° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç...' : '‚ö° ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏î‡πà‡∏ß‡∏ô (‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)'}
            </button>
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
          {actions.map((action) => (
            <div key={action.label} className="bg-white rounded-xl shadow-lg p-6 hover:shadow-xl transition-shadow">
              <h3 className="text-lg font-semibold mb-3 text-gray-800">
                {action.label}
              </h3>
              <p className="text-gray-600 text-sm mb-4 leading-relaxed">
                {action.description}
              </p>
              
              <button
                onClick={() => runAction(action, action.label)}
                disabled={loading[action.label]}
                className={`w-full text-white py-2 px-4 rounded-lg transition-colors font-medium ${action.color} disabled:bg-gray-400`}
              >
                {loading[action.label] ? (
                  <span className="flex items-center justify-center">
                    <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö...
                  </span>
                ) : (
                  '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö'
                )}
              </button>
              
              {results[action.label] && (
                <div className="mt-4">
                  <div className={`text-sm font-medium flex items-center ${
                    results[action.label].success ? 'text-green-600' : 'text-red-600'
                  }`}>
                    {results[action.label].success ? '‚úÖ' : '‚ùå'}
                    <span className="ml-2">
                      Status: {results[action.label].status}
                    </span>
                  </div>
                  
                  <div className="mt-2 max-h-32 overflow-y-auto bg-gray-50 p-3 rounded text-xs border">
                    <pre className="whitespace-pre-wrap">
                      {JSON.stringify(results[action.label], null, 2)}
                    </pre>
                  </div>
                </div>
              )}
            </div>
          ))}
        </div>

        {Object.keys(results).length > 0 && (
          <div className="bg-white rounded-xl shadow-lg p-6">
            <h2 className="text-2xl font-semibold mb-6 text-gray-800">üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö</h2>
            
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-6">
              {Object.entries(results).map(([label, result]) => (
                <div key={label} className={`p-4 rounded-lg border-2 ${
                  result.success 
                    ? 'bg-green-50 border-green-200' 
                    : 'bg-red-50 border-red-200'
                }`}>
                  <div className="font-medium text-sm mb-2">{label}</div>
                  <div className="text-xs text-gray-600 mb-2">
                    {new Date(result.timestamp).toLocaleString('th-TH')}
                  </div>
                  <div className="text-sm">
                    {result.success ? (
                      <span className="text-green-700">
                        ‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - {result.data?.data?.length || result.data?.sampleData?.posts?.length || 0} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                      </span>
                    ) : (
                      <span className="text-red-700">
                        ‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß - {result.error || result.data?.error || '‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏'}
                      </span>
                    )}
                  </div>
                </div>
              ))}
            </div>

            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
              <h3 className="font-semibold text-blue-800 mb-2">üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:</h3>
              <ul className="text-blue-700 space-y-1 text-sm">
                <li>‚Ä¢ ‡∏´‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Database Connection ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‚Üí ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</li>
                <li>‚Ä¢ ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‚Üí ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Sample Data</li>
                <li>‚Ä¢ ‡∏´‡∏≤‡∏Å API ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ï‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‚Üí ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Network ‡∏´‡∏£‡∏∑‡∏≠ CORS</li>
                <li>‚Ä¢ ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‚Üí ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Console ‡πÉ‡∏ô‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π Error Message</li>
              </ul>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}